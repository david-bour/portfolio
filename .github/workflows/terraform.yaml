name: Terraform Apply

on:
  workflow_dispatch:
  pull_request:
    types: ["opened", "synchronize"]
  push:
    branches:
      - main
    paths:
      - "ops/deployment/infrastructure/terraform"

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
      pull-requests: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/650273226296/locations/global/workloadIdentityPools/gh-actions-pool/providers/gh-actions'
          service_account: 'tf-provider@cloudresume-380001.iam.gserviceaccount.com'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.2
          cli_config_credentials_token: ${{ steps.auth.outputs.access_token }}
      
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ops/deployment/infrastructure/terraform

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ops/deployment/infrastructure/terraform
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ops/deployment/infrastructure/terraform

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
        working-directory: ops/deployment/infrastructure/terraform

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name = 'push'
        run: terraform apply -auto-approve -input=false
        working-directory: ops/deployment/infrastructure/terraform